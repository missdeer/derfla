name: Windows
on: 
  push:
    paths-ignore:
      - 'README.md'
      - 'LICENSE'
  pull_request:
    paths-ignore:
      - 'README.md'
      - 'LICENSE'
jobs:
  Windows-MSVC:
    runs-on: windows-latest
    strategy:
      matrix:
        include:
          - qt_arch: win64_msvc2019_64
            qt_ver: 5.15.2
            qt_modules: ""
            msvc_arch: x64
            output_dir: x86_64
          - qt_arch: win64_msvc2019_64
            qt_ver: 6.6.0
            qt_modules: "qt5compat qtimageformats"
            msvc_arch: x64
            output_dir: x86_64
          - qt_arch: win32_msvc2019
            qt_ver: 5.15.2
            qt_modules: ""
            msvc_arch: x86
            output_dir: x86
    env:
      qt_target: desktop
    steps:
      - name: Install Qt
        uses: jurplel/install-qt-action@v3
        with:
          target: ${{ env.qt_target }}
          version: ${{ matrix.qt_ver }}
          arch: ${{ matrix.qt_arch }}
          modules: ${{ matrix.qt_modules }}
          cache: 'true'
          cache-key-prefix: 'install-qt-action-${{ matrix.qt_arch }}-${{ matrix.qt_ver }}'
          aqtversion: '==3.0.1'
      - uses: actions/checkout@v2
        with:
          fetch-depth: 1
          submodules: true
      - name: build-msvc
        shell: cmd
        env:
          vc_arch: ${{ matrix.msvc_arch }}
        run: |
          call "C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Auxiliary\Build\vcvarsall.bat" %vc_arch%
          mkdir build
          cd build
          cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_C_COMPILER=cl -DCMAKE_CXX_COMPILER=cl -G Ninja ..
          ninja
          cd ..\bin\${{ matrix.output_dir }}
          windeployqt.exe Derfla.exe
          windeployqt.exe DerflaUtil.dll
          cd ..\..

      - name: upload executable artifact
        uses: actions/upload-artifact@v1
        with:
          path: bin/${{ matrix.output_dir }}
          name: Derfla-${{ matrix.qt_arch }}-${{ matrix.qt_ver }}

          
  Windows-MinGW:
    runs-on: windows-latest
    strategy:
      matrix:
        include:
          - qt_arch: mingw64_qt5-gcc
            mingw_arch: MINGW64 
            mingw_prefix: mingw-w64-x86_64
            toolchains: gcc
            c: gcc
            cxx: g++
            mkspec: win32-g++
            qt_build: qt5
            output_dir: x86_64
          - qt_arch: mingw32_qt5-gcc
            mingw_arch: MINGW32
            mingw_prefix: mingw-w64-i686
            toolchains: gcc
            c: gcc
            cxx: g++
            mkspec: win32-g++
            qt_build: qt5
            output_dir: x86
          - qt_arch: clang64_qt5-clang
            mingw_arch: CLANG64 
            mingw_prefix: mingw-w64-clang-x86_64
            toolchains: clang
            c: clang
            cxx: clang++
            mkspec: win32-clang-g++
            qt_build: qt5
            output_dir: x86_64
          - qt_arch: clang32_qt5-clang
            mingw_arch: CLANG32
            mingw_prefix: mingw-w64-clang-i686
            toolchains: clang
            c: clang
            cxx: clang++
            mkspec: win32-clang-g++
            qt_build: qt5
            output_dir: x86
          - qt_arch: mingw64_qt6-gcc
            mingw_arch: MINGW64 
            mingw_prefix: mingw-w64-x86_64
            toolchains: gcc
            c: gcc
            cxx: g++
            mkspec: win32-g++
            qt_build: qt6
            output_dir: x86_64
          - qt_arch: clang64_qt6-clang
            mingw_arch: CLANG64 
            mingw_prefix: mingw-w64-clang-x86_64
            toolchains: clang
            c: clang
            cxx: clang++
            mkspec: win32-clang-g++
            qt_build: qt6
            output_dir: x86_64
          - qt_arch: mingw32_qt6-gcc
            mingw_arch: MINGW32
            mingw_prefix: mingw-w64-i686
            toolchains: gcc
            c: gcc
            cxx: g++
            mkspec: win32-g++
            qt_build: qt6
            output_dir: x86
          - qt_arch: clang32_qt6-clang
            mingw_arch: CLANG32
            mingw_prefix: mingw-w64-clang-i686
            toolchains: clang
            c: clang
            cxx: clang++
            mkspec: win32-clang-g++
            qt_build: qt6
            output_dir: x86
    steps:
      - uses: msys2/setup-msys2@v2
        with:
          update: true
          msystem: ${{ matrix.mingw_arch }}
          install: zip make git ${{ matrix.mingw_prefix }}-${{ matrix.toolchains }} ${{ matrix.mingw_prefix }}-make ${{ matrix.mingw_prefix }}-cmake ${{ matrix.mingw_prefix }}-${{ matrix.qt_build }} ${{ matrix.mingw_prefix }}-openssl ${{ matrix.mingw_prefix }}-zstd
          
      - uses: actions/checkout@v2
        with:
          fetch-depth: 1
          submodules: true
          
      - run: |
          git clone https://github.com/missdeer/mingwdeployqt.git
          
      - name: Build mingwdeployqt
        shell: msys2 {0}
        run: |
          cd mingwdeployqt
          mkdir build
          cd build
          env PATH=$PATH:/${{ matrix.mingw_arch }}/bin cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_C_COMPILER=${{ matrix.c }} -DCMAKE_CXX_COMPILER=${{ matrix.cxx }} -G Ninja ..
          ninja
          cp mingwdeployqt.exe /${{ matrix.mingw_arch }}/bin/
          cd ../..
          
      - name: Build Derfla
        shell: msys2 {0}
        run: |
          mkdir build
          cd build
          env PATH=$PATH:/${{ matrix.mingw_arch }}/bin cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_C_COMPILER=${{ matrix.c }} -DCMAKE_CXX_COMPILER=${{ matrix.cxx }} -G Ninja ..
          ninja
          cd ../bin/${{ matrix.output_dir }}
          env PATH=$PATH:/${{ matrix.mingw_arch }}/bin /${{ matrix.mingw_arch }}/bin/mingwdeployqt.exe Derfla.exe
          env PATH=$PATH:/${{ matrix.mingw_arch }}/bin /${{ matrix.mingw_arch }}/bin/mingwdeployqt.exe DerflaUtil.dll
          cd ../..          

      - name: upload executable artifact
        uses: actions/upload-artifact@v1
        with:
          path: bin/${{ matrix.output_dir }}
          name: Derfla-${{ matrix.qt_arch }}
