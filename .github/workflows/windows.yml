name: Windows
on: 
  push:
    paths-ignore:
      - 'README.md'
      - 'LICENSE'
  pull_request:
    paths-ignore:
      - 'README.md'
      - 'LICENSE'

env:
  WINDOWS_BASEKIT_URL: https://registrationcenter-download.intel.com/akdlm/IRC_NAS/f96c71db-2c6c-45d9-8c1f-0348ef5885cf/w_BaseKit_p_2023.2.0.49396_offline.exe
  WINDOWS_HPCKIT_URL: https://registrationcenter-download.intel.com/akdlm/IRC_NAS/438527fc-7140-422c-a851-389f2791816b/w_HPCKit_p_2023.2.0.49441_offline.exe
  WINDOWS_CPP_COMPONENTS: intel.oneapi.win.cpp-compiler
  WINDOWS_DPCPP_COMPONENTS: intel.oneapi.win.dpcpp-compiler
  SAMPLES_TAG: 2023.2.0
  COMPILER_VERSION: 2023.2.0
  TBB_VERSION: 2021.10.0
  VS_VER: vs2022
  clang_link: https://github.com/llvm/llvm-project/releases/download/llvmorg-17.0.6/LLVM-17.0.6-win64.exe
  ninja_link: https://github.com/ninja-build/ninja/releases/download/v1.11.1/ninja-win.zip

jobs:
  Windows-MSVC:
    runs-on: windows-latest
    strategy:
      matrix:
        toolset: [cl, clang-cl, icx]
        qt_ver: [5.15.2, 6.6.0]
        include:
          - toolset: icx
            qt_arch: win64_msvc2019_64
            qt_ver: 5.15.2
            qt_modules: ""
            msvc_arch: x64
            output_dir: x86_64
          - toolset: icx
            qt_arch: win64_msvc2019_64
            qt_ver: 6.6.0
            qt_modules: "qt5compat qtimageformats"
            msvc_arch: x64
            output_dir: x86_64
          - toolset: clang-cl
            qt_arch: win64_msvc2019_64
            qt_ver: 5.15.2
            qt_modules: ""
            msvc_arch: x64
            output_dir: x86_64
          - toolset: clang-cl
            qt_arch: win64_msvc2019_64
            qt_ver: 6.6.0
            qt_modules: "qt5compat qtimageformats"
            msvc_arch: x64
            output_dir: x86_64
          - toolset: cl
            qt_arch: win64_msvc2019_64
            qt_ver: 5.15.2
            qt_modules: ""
            msvc_arch: x64
            output_dir: x86_64
          - toolset: cl
            qt_arch: win64_msvc2019_64
            qt_ver: 6.6.0
            qt_modules: "qt5compat qtimageformats"
            msvc_arch: x64
            output_dir: x86_64
          - toolset: cl
            qt_arch: win32_msvc2019
            qt_ver: 5.15.2
            qt_modules: ""
            msvc_arch: x86
            output_dir: x86
    env:
      qt_target: desktop
    steps:
      - name: Install Qt
        uses: jurplel/install-qt-action@v3
        with:
          target: ${{ env.qt_target }}
          version: ${{ matrix.qt_ver }}
          arch: ${{ matrix.qt_arch }}
          modules: ${{ matrix.qt_modules }}
          cache: 'true'
          cache-key-prefix: 'install-qt-action-${{ matrix.qt_arch }}-${{ matrix.qt_ver }}'
          aqtversion: '==3.0.1'

      - uses: actions/checkout@v2
        with:
          fetch-depth: 1
          submodules: true

      - name: vcpkg build
        uses: johnwason/vcpkg-action@v5
        id: vcpkg
        with:
          pkgs: tbb
          triplet: x64-windows-release
          token: ${{ github.token }}

      - name: Set up clang for Windows
        if: matrix.toolset == 'clang-cl'
        shell: cmd
        run: |
          mkdir llvm
          cd llvm
          curl.exe -o LLVM.exe -L ${{ env.clang_link }}
          7z.exe x LLVM.exe
          cd ..

      - name: cache intel install
        if: matrix.toolset == 'icx'
        id: cache-install
        uses: actions/cache@v2
        with:
          path: |
              C:\Program Files (x86)\Intel\oneAPI\setvars-vcvarsall.bat
              C:\Program Files (x86)\Intel\oneAPI\compiler
          key: install-${{ env.CACHE_NUMBER }}-${{ env.WINDOWS_HPCKIT_URL }}-${{ env.WINDOWS_CPP_COMPONENTS }}-compiler-${{ hashFiles('**/scripts/cache_exclude_windows.sh') }}

      - name: install intel
        if: steps.cache-install.outputs.cache-hit != 'true' && matrix.toolset == 'icx'
        run: |
          git clone --depth=1 https://github.com/oneapi-src/oneapi-ci.git oneapi-ci
          cd oneapi-ci
          scripts/install_windows.bat ${{ env.WINDOWS_HPCKIT_URL }} ${{ env.WINDOWS_CPP_COMPONENTS }}

      - name: restore registry on cache hit
        if: steps.cache-install.outputs.cache-hit == 'true' && matrix.toolset == 'icx'
        run:  |
          git clone --depth=1 https://github.com/oneapi-src/oneapi-ci.git oneapi-ci
          cd oneapi-ci
          scripts/restore_registry.bat ${{ env.COMPILER_VERSION }}

      - name: build-msvc
        shell: cmd
        env:
          vc_arch: ${{ matrix.msvc_arch }}
        run: |
          call "C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Auxiliary\Build\vcvarsall.bat" %vc_arch%
          call "C:\Program Files (x86)\Intel\oneAPI\compiler\${{ env.COMPILER_VERSION }}\env\vars.bat"
          set PATH="C:\Program Files (x86)\Intel\oneAPI\compiler\${{ env.COMPILER_VERSION }}\windows\bin-llvm\";%CD%\llvm\bin;%CD%\jom;%PATH%
          mkdir build
          cd build
          cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_C_COMPILER=${{ matrix.toolset }} -DCMAKE_CXX_COMPILER=${{ matrix.toolset }} -G Ninja "-DCMAKE_TOOLCHAIN_FILE=${{ github.workspace }}\vcpkg\scripts\buildsystems\vcpkg.cmake" -DVCPKG_TARGET_TRIPLET=x64-windows-release -DVCPKG_MANIFEST_MODE=OFF ..
          cmake --build . --parallel --verbose
          cd ..\bin\${{ matrix.output_dir }}
          windeployqt.exe Derfla.exe
          windeployqt.exe DerflaUtil.dll
          cd ..\..

      - name: upload executable artifact
        uses: actions/upload-artifact@v1
        with:
          path: bin/${{ matrix.output_dir }}
          name: Derfla-${{ matrix.qt_arch }}-${{ matrix.qt_ver }}-${{ matrix.toolset }}

          
  Windows-MinGW:
    runs-on: windows-latest
    strategy:
      matrix:
        include:
          - qt_arch: mingw64_qt5-gcc
            mingw_arch: MINGW64 
            mingw_prefix: mingw-w64-x86_64
            toolchains: gcc
            c: gcc
            cxx: g++
            mkspec: win32-g++
            qt_build: qt5
            output_dir: x86_64
          - qt_arch: mingw32_qt5-gcc
            mingw_arch: MINGW32
            mingw_prefix: mingw-w64-i686
            toolchains: gcc
            c: gcc
            cxx: g++
            mkspec: win32-g++
            qt_build: qt5
            output_dir: x86
          - qt_arch: clang64_qt5-clang
            mingw_arch: CLANG64 
            mingw_prefix: mingw-w64-clang-x86_64
            toolchains: clang
            c: clang
            cxx: clang++
            mkspec: win32-clang-g++
            qt_build: qt5
            output_dir: x86_64
          - qt_arch: clang32_qt5-clang
            mingw_arch: CLANG32
            mingw_prefix: mingw-w64-clang-i686
            toolchains: clang
            c: clang
            cxx: clang++
            mkspec: win32-clang-g++
            qt_build: qt5
            output_dir: x86
          - qt_arch: mingw64_qt6-gcc
            mingw_arch: MINGW64 
            mingw_prefix: mingw-w64-x86_64
            toolchains: gcc
            c: gcc
            cxx: g++
            mkspec: win32-g++
            qt_build: qt6
            output_dir: x86_64
          - qt_arch: clang64_qt6-clang
            mingw_arch: CLANG64 
            mingw_prefix: mingw-w64-clang-x86_64
            toolchains: clang
            c: clang
            cxx: clang++
            mkspec: win32-clang-g++
            qt_build: qt6
            output_dir: x86_64
          - qt_arch: ucrt64_qt5-gcc
            mingw_arch: CLANG64
            mingw_prefix: mingw-w64-ucrt64-x86_64
            toolchains: gcc
            c: gcc
            cxx: g++
            mkspec: win32-g++
            qt_build: qt5
            output_dir: x86_64
          - qt_arch: ucrt64_qt6-gcc
            mingw_arch: UCRT64
            mingw_prefix: mingw-w64-ucrt64-x86_64
            toolchains: gcc
            c: gcc
            cxx: g++
            mkspec: win32-g++
            qt_build: qt6
            output_dir: x86_64
    steps:
      - uses: msys2/setup-msys2@v2
        with:
          update: true
          msystem: ${{ matrix.mingw_arch }}
          install: zip make git ${{ matrix.mingw_prefix }}-${{ matrix.toolchains }} ${{ matrix.mingw_prefix }}-make ${{ matrix.mingw_prefix }}-cmake ${{ matrix.mingw_prefix }}-${{ matrix.qt_build }} ${{ matrix.mingw_prefix }}-openssl ${{ matrix.mingw_prefix }}-zstd ${{ matrix.mingw_prefix }}-tbb ${{ matrix.mingw_prefix }}-openmp
          
      - uses: actions/checkout@v2
        with:
          fetch-depth: 1
          submodules: true
          
      - run: |
          git clone https://github.com/missdeer/mingwdeployqt.git
          
      - name: Build mingwdeployqt
        shell: msys2 {0}
        run: |
          cd mingwdeployqt
          mkdir build
          cd build
          env PATH=$PATH:/${{ matrix.mingw_arch }}/bin cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_C_COMPILER=${{ matrix.c }} -DCMAKE_CXX_COMPILER=${{ matrix.cxx }} -G Ninja ..
          ninja
          cp mingwdeployqt.exe /${{ matrix.mingw_arch }}/bin/
          cd ../..
          
      - name: Build Derfla
        shell: msys2 {0}
        run: |
          mkdir build
          cd build
          env PATH=$PATH:/${{ matrix.mingw_arch }}/bin cmake -DCMAKE_BUILD_TYPE=Release -DCMAKE_C_COMPILER=${{ matrix.c }} -DCMAKE_CXX_COMPILER=${{ matrix.cxx }} -G Ninja ..
          ninja
          cd ../bin/${{ matrix.output_dir }}
          env PATH=$PATH:/${{ matrix.mingw_arch }}/bin /${{ matrix.mingw_arch }}/bin/mingwdeployqt.exe Derfla.exe
          env PATH=$PATH:/${{ matrix.mingw_arch }}/bin /${{ matrix.mingw_arch }}/bin/mingwdeployqt.exe DerflaUtil.dll
          cd ../..          

      - name: upload executable artifact
        uses: actions/upload-artifact@v1
        with:
          path: bin/${{ matrix.output_dir }}
          name: Derfla-${{ matrix.qt_arch }}
